Creating and using a DLL
* Creating a DLL
* Using the DLL


Creating a DLL
There are multiple methods of creating a DLL:
* using CodeGear
* using Cygwin
* using Microsoft Visual Studio C++
* using MingW


Creating a DLL using CodeGear
To create a DLL using CodeGear you'll need:
* Embarcadero CodeGear C++ Builder
  The provided CodeGear project files were created using the 2009
  version. Note that some version of CodeGear have a broken
  compiler/linker and you'll need to turn off code optimization
  to be able to build libfguid.

Make sure to check if your build environment defines the correct WINVER for your build.
The code uses WINAPI version specific functions based on WINVER.
You can define a custom WINVER in the CodeGear project files or in libfguid-<version>/common/config_borlandc.h

You should be able to build the DLL using the provided project files.


Creating a DLL using Cygwin
To create a DLL using Cygwin you'll need:
Cygwin with the following packages:
* binutils
* gcc-core
* autoconf
* automake
* make
* libtool
* gettext
* libiconv

Building the library:
./configure
make library

You should end up with the following DLL:
libfguid-<version>/libfguid/.libs/cygfguid-0.dll


Creating a DLL using Microsoft Visual Studio C++
To create a DLL using Microsoft Visual Studio C++ you'll need:
* Microsoft Visual Studio C++
  The provided Visual Studio project files were created using
  the 2008 express version. The express verion is available on the
  Microsoft website

Make sure to check if your build environment defines the correct WINVER for your build.
The code uses WINAPI version specific functions based on WINVER.
You can define a custom WINVER in the Microsoft Visual Studio C++ project files or in libfguid-<version>/common/config_msc.h

You should be able to build the DLL using the provided project files.
Note that the project files contain a Release and VSDebug configuration.

If you want to create your own Microsoft Visual Studio project files note that libfguid needs
to be compiled with the parameter /MD, because stderr is passed from the executables.


Creating a DLL using MingW
To create a DLL using MingW see README.mingw

You should end up with the following DLL:
libfguid/.libs/libfguid-<version>.dll


Using the DLL
Make sure you use define LIBFGUID_DLL_IMPORT before including <libfguid.h>,

When the DLL was build with Microsoft Visual Studio, you'll also need the Microsoft Visual Studio redistributable DLLs
to run on other platforms than the build platform.

